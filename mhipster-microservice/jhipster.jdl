application {
 config {
   baseName store
   applicationType gateway
   packageName com.mhipster.demo.store
   serviceDiscoveryType consul
   authenticationType oauth2
   prodDatabaseType postgresql
   cacheProvider no
   buildTool gradle
   clientFramework angularX
   enableSwaggerCodegen true
   testFrameworks [protractor]
 }
 entities *
}

application {
 config {
   baseName crm
   blueprints [micronaut]
   applicationType microservice
   packageName com.mhipster.demo.crm
   serviceDiscoveryType consul
   authenticationType oauth2
   cacheProvider no
   prodDatabaseType postgresql
   buildTool gradle
   serverPort 8081
   skipUserManagement true
 }
 entities * except Invoice, Shipment
}

application {
 config {
   baseName invoice
   blueprints [micronaut]
   applicationType microservice
   packageName com.mhipster.demo.invoice
   serviceDiscoveryType consul
   authenticationType oauth2
   cacheProvider no
   prodDatabaseType postgresql
   buildTool gradle
   serverPort 8082
   skipUserManagement true
 }
 entities Invoice, Shipment
}

entity Product {
   name String required
   description String
   price BigDecimal required min(0)
   size Size required
   image ImageBlob
}
enum Size {
   S, M, L, XL, XXL
}
entity Customer {
   firstName String required
   lastName String required
   gender Gender required
   email String required pattern(/[a-z0-9._+-]{1,20}@[a-z0-9]{3,15}\.[a-z]{2,4}/)
   phone String required
   addressLine1 String required
   addressLine2 String
   city String required
   country String required
}
enum Gender {
   MALE, FEMALE, OTHER
}
entity ProductOrder {
   placedDate Instant required
   status OrderStatus required
   code String required
   invoiceId String
}
enum OrderStatus {
   COMPLETED, PENDING, CANCELLED
}
entity OrderItem {
   quantity Integer required min(0)
   totalPrice BigDecimal required min(0)
   status OrderItemStatus required
}
enum OrderItemStatus {
   AVAILABLE, OUT_OF_STOCK, BACK_ORDER
}
relationship ManyToOne {
OrderItem{product(name)} to Product
}
relationship OneToMany {
  Customer{order} to ProductOrder{customer(email)},
  ProductOrder{orderItem} to OrderItem{order(code)}
}

// service Product, Customer, ProductOrder, OrderItem with serviceClass
// paginate Product, Customer, ProductOrder, OrderItem with pagination

/* Entities for Invoice microservice */
entity Invoice {
   code String required
   date Instant required
   details String
   status InvoiceStatus required
   paymentMethod PaymentMethod required
   paymentDate Instant required
   paymentAmount BigDecimal required
}
enum InvoiceStatus {
   PAID, ISSUED, CANCELLED
}
entity Shipment {
   trackingCode String
   date Instant required
   details String
}
enum PaymentMethod {
   CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}
relationship OneToMany {
   Invoice{shipment} to Shipment{invoice(code)}
}
// service Invoice, Shipment with serviceClass
// paginate Invoice, Shipment with pagination
microservice Customer, Product, ProductOrder, OrderItem with crm
microservice Invoice, Shipment with invoice

// will be created under 'docker-compose' folder
deployment {
   deploymentType docker-compose
   appsFolders [store, crm]
   dockerRepositoryName "atomfrede"
   monitoring no
   serviceDiscoveryType consul
}
